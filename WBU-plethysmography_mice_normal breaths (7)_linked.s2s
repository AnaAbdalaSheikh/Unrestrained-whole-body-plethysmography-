'this version link functions mark, analyse and varibility so they run in tandem without need for user input.

Var res%; 'Result view handle

Var txt%; 'Text view handle

var fileok%;

View (app (3));
WindowVisible (0);

'setting toolbar buttons
ToolbarSet (1,"Del Sel Chan",delchan%);
ToolbarSet (2,"Hide Sel Chan",hide%);
ToolbarSet (3,"Quit Script",abort%);
Toolbarset (4,"Save Sel Chan",save%);
ToolbarSet (5,"Get Text",gettxt%);
ToolbarSet (6,"Get File",getdata%);
ToolbarSet (7,"Set Parameters",Dialog%);
ToolbarSet (8, "Recall Cursors",Do%);
ToolbarSet (9, "Mark VNABs",Mark%);
ToolbarSet (10, "Analyse VNABs",Analyse%);
ToolbarSet (11, "Variability",Variability%);
ToolbarSet (12,"ROI-1",ROI1%);
ToolbarSet (13,"ROI-2",ROI2%);
ToolbarSet (14,"Print",Print%);


Toolbar ("IP: Ana Paula Abdala Sheikh, 2019", 1023);

Halt;

'Open an experiment file***********************************

Func getdata%();

res%:=FileOpen ("",0,11);
Window (0,0,70,100);
fileok%:=1;
    
Fix%();

Return 1;
End;

var filename1$;

Func Fix%(); ' changes the display configuration to save time

if res%>0 then View (res%);
    
    Drawmode(2,14);
    XAxisStyle(2, 0, 0);
    XAxisAttrib(0);
    XRange(0, MaxTime());
    ChanShow(-1);
    Optimise(-1);
    FrontView(res%);
    filename1$:=FileName$(0);
    
    HCursorDelete(-1);
    HCursorNew(1, 0.0); ' place a horizontal cursor on zero flow
    HCursorLabel(0);
    
endif;

Return 1;
End;

'Open a text file*****************************
Func gettxt%();
var file%;

file%:=Interact("Choose an option",1023,0,"Open a new file","Open an existing file");

if file%=1 then;
    txt%:=FileNew(1,1);
    Window (70,0,100,100);
endif;

if file%=2 then;    
    txt%:=FileOpen ("",1,11);
    Window (70,0,100,100);
endif

fileok%:=1;
Return 1;
End;

'Hide selected channels*******************************
Func hide%();

View(Res%); 'Point to the result view
ChanHide (-3);

fileok%:=1;
Return 1
End

'Delete selected channels*******************************
Func delchan%();

View(Res%); 'Point to the result view
ChanDelete (-3,1);

fileok%:=1;
Return 1
End

'Save selected memory channels**************************

Func save%();

View (res%);
ChanSave(-3,0);
Message("Selected channels saved");

Return 1
End


'Stop running script*********************************************

Func abort%();

Halt;
End

'Determine parameters for breath detection***********************

var chTE%:=3;      'channel holding TE values for apnoeas generated by running script WBU-plethysmography_mice (6)
var chApnoeas%:=6; 'channel holding apnoeas (TEx values) generated by running script WBU-plethysmography_mice (6)
var minstep:=0.05;  'minimum stepping for cursor zero - detection of PIF
var amp:=3.00;      'amplitude for trough find in cursor zero - detection PIF
var repol:=97;      '% repolarization value for start-I - detection of start of I
var base:=0.00;     'baseline for zero flow - in case of bias flow offset
var cutoff:=30;     'maximum allowed % ratio between Insp/Exp volumes for real breath detection
var TEx:=4;         'parameter used to define apnoeas
var chAvTE%:=5;     'channel holding average TE per minute

Func Dialog%();

var ok%,ratio;

View(res%);

DlgCreate("Breath analysis parameters");  'Start new dialog
DlgAllow(1023);
DlgReal(1,"Minimum step (s)",0.000,1.000);
DlgReal(2,"Amplitude for trough find (mL/s)",0.000,10.000);
DlgReal(3,"Repolarization(%) for start of breath",0,100);
DlgReal(4,"Baseline offset (mL/s)",-1000.000,1000.000);
DlgReal(5,"Max % ratio of Insp/Exp volumes for artefact rejection",0,100.00);
DlgChan(6,"TE channel",64);
DlgChan(7,"Apnoeas channel (TEx)",64);
DlgChan(8,"Av.TE/min channel",64);
DlgReal(9,"Parameter to define apnoeas TEx",0,100.00);
DlgButton(0,"Cancel");
DlgButton(1,"OK");
ok%:= DlgShow(minstep,amp,repol,base,cutoff,chTE%,chApnoeas%,chAvTE%,TEx);

If ok%=0 then
    Message("Parameters for breath analysis were not changed");
	return 1;
Endif

If ok%>0 then
    
    Do%();
    
    ChanHide(-1);
    ChanShow(1,chTE%,chApnoeas%,chAvTE%);
    ratio:=2.00/TEx;
    YRange(chApnoeas%, 0, 2);
    YRange(chAvTE%,0,ratio);
    ChanOrder(chApnoeas%,0,chAvTE%);
    
    return 1
endif

end

' Set active cursors that interact with breath detection variables

Func Do%();

View(res%);

CursorDelete(-1);

CursorNew(); 'cursors for breath detection
CursorNew();
CursorNew();
CursorNew();
CursorNew();
CursorNew();
CursorNew();
CursorLabel(4,0,"END-I");
CursorLabel(4,1,"PIF");
CursorLabel(0,2);           ' isoeletric crossing
CursorLabel(4,3,"START-I");
CursorLabel(4,4,"PIF");
CursorLabel(4,5,"PEF");
CursorLabel(0,6);           'isoeletric crossing
CursorLabel(4,7,"END-E");
CursorLabelPos(0,80);
CursorLabelPos(1,85);
CursorLabelPos(3,65);
CursorLabelPos(4,85);
CursorLabelPos(5,65);
CursorLabelPos(7,80);

CursorActive(0,14, chTE%, minstep, "", "", 1);   'Data points on TE channel - end of inspiration
CursorActive(1,5, 1, "Cursor(0)", "Cursor(0)-1", "", amp, 0, 0);   'Trough find - PIF
CursorActive(2,7, 1, "Cursor(1)", "Cursor(1)-1", "", base, 0, 0);   'Rising threshold - isoeletric crossing
CursorActive(3,15, 1, "Cursor(1)", "Cursor(2)", "", 0, repol, 0, "Cursor(2)");   'Repolarisation % - start of inspiration
CursorActive(4,5, 1, "Cursor(0)", "Cursor(0)+10", "", amp, 0, 0);   'Trough find - PIF next breath
CursorActive(5,1, 1, "Cursor(4)", "Cursor(0)", "");   'Maximum value - PEF
CursorActive(6,7, 1, "Cursor(4)", "Cursor(5)", "", base, 0, 0);   'Rising threshold - isoeletric crossing
CursorActive(7,15, 1, "Cursor(4)", "Cursor(6)", "", 0, repol, 0, "Cursor(6)");   'Repolarisation % - end of expiration

CursorVisible(0, 1);  'Show the cursor
CursorVisible(-1,1);
Cursor(0, XLow()*0.7+XHigh()*0.3);

fileok%:=1;
Return 1;
End;


var ch1%; 'Memory channel created to hold inspiratory volumes of all detected breaths
var ch2%; 'Memory channel created to hold expiratory volumes of all detected breaths
var ch3%; 'Memory channel created to hold marks for valid breaths (valid breaths)
var ch4%; 'Memory channel created to hold marks for rejected breaths (artefacts)


Func Mark%();

var time:=-1; 'these are regional variables used for breath validation
var inspvol;
var expvol;
var IEratio;
var IEdif;
var nbreaths;
var nvalid;
var nratio;

View(res%);

WindowVisible(0);

MeasureX(102, 1, "Cursor(0)", "0");
MeasureY(7, 1, "Cursor(3)", "Cursor(0)");
ch1%:= MeasureToChan(0, "Insp vol temp", 7, 14, chTE%, minstep, 1, 0, 1); 'Memory channel created to hold inspiratory volumes of all detected breaths
Process(0.0, View(-1).MaxTime(), 0, 1, ch1%);

Yield(0,1023);

MeasureX(102, 1, "Cursor(0)", "0");
MeasureY(7, 1, "Cursor(0)", "Cursor(7)");
ch2%:= MeasureToChan(0, "Exp vol temp", 7, 14, chTE%, minstep, 1, 0, 1); 'Memory channel created to hold expiratory volumes of all detected breaths
Process(0.0, View(-1).MaxTime(), 0, 1, ch2%);

Yield(0,1023);

ch3%:= MemChan(5); 'Add new Marker channel for valid breaths (valid breaths)
MemImport(ch3%, chTE%, 0.0, MaxTime()); 'import all marks from TE channel
ChanShow(ch3%); 'Make it visible
ChanTitle$(ch3%,"Valid non-apn breath");
DrawMode(ch3%,2,1, 0,0); 'Set to lines draw mode
ChanColour(ch3%, 0,33);   'Set channel background colour to pale yellow

Yield(0,1023);

ch4%:=MemChan(5); 'Add new Marker channel for rejected breaths (artefacts)
ChanShow(ch4%);
ChanTitle$(ch4%,"Artefact+Apnoea");
DrawMode(ch4%,2,1,0,0);'Set to lines draw mode

Yield(0,1023);

repeat
    time:=NextTime(chTE%,time); 'get time for next marker
    inspvol:=ChanValue(ch1%,time); 'measure inpiratory volume at this time
    expvol:=ChanValue(ch2%,time); 'measure expiratory volume at this time
    
    if inspvol>0 then
        IEdif:= Abs(inspvol-expvol);
        IEratio:=(IEdif)/inspvol*100; ' this caculates the ratio between inspiratory and expiratory volumes as %
    endif
        
    if time>-1 and IEratio>cutoff then                  'sets the condition for rejecting breaths
        MemDeleteTime(ch3%,3, time-0.001, time+0.001); 'deletes items in this time range if it fits the condition above
        MemSetItem(ch4%,0,time);                       'adds an item to the artefact channel
    endif    
until time=-1; 'repeats these set of instructions until this condition is met - NextTime() returns -1 when no more items are found


repeat
    time:=NextTime(chApnoeas%,time);
    if time>-1 then
        MemDeleteTime(ch3%,3, time-0.001, time+0.001); 'deletes items in this time range if it fits the condition above
        MemSetItem(ch4%,0,time);                       'adds an item to the artefact channel
    endif
until time=-1; 'repeats these set of instructions until this condition is met - NextTime() returns -1 when no more items are found

ChanHide(ch1%,ch2%);

nvalid:=Count(ch3%,0.0,Maxtime());
nbreaths:=Count(chTE%,0.0,Maxtime());
nratio:=nvalid/nbreaths*100;

WindowVisible(1);

View(txt%);

Print("\nApnoea channel used for analysis = %d",chApnoeas%);
Print("\nParameter used to define apnoeas (s) = average TE/min x %.1f",TEx);
Print("\nTE channel used for anlysis = %d",chTE%);
Print("\nAverage TE/min channel used for analysis = %d",chAvTE%);
Print("\nMinimum stepping for cursor zero (s) = %.3f",minstep);
Print("\nAmplitude for trough find (mL/s) = %.2f",amp);
Print("\nBaseline offset (mL/s) = %.3f",base);
Print("\nMax % ratio of Insp/Exp volumes for artefact rejection) = %.2f",cutoff);
Print("\nPotential breaths analysed = %.0f",nbreaths);
Print("\nNon-apnoeic breaths validated = %.0f",nvalid);
Print("\nGlobal non-apnoeic breath validation rate = %.2f%",nratio);

Analyse%();

fileok%:=1;
Return 1;
End;


var ch5%, ch6%, ch7%, ch8%, ch9%, ch10%, ch11%, ch12%, ch13%;
var TI, TE, Ttot, VT, f;

Func Analyse%();

var time:=-1;
var codes%[4]; ' for marker codes
var rm[1];     ' for RealMark data

View(res%);

WindowVisible(0);

CursorDelete(-1);

CursorNew(); 'cursors for breath detection
CursorNew();
CursorNew();
CursorNew();
CursorNew();
CursorNew();
CursorNew();
CursorLabel(4,0,"END-I");
CursorLabel(4,1,"PIF");
CursorLabel(0,2);           ' isoeletric crossing
CursorLabel(4,3,"START-I");
CursorLabel(4,4,"PIF");
CursorLabel(4,5,"PEF");
CursorLabel(0,6);           'isoeletric crossing
CursorLabel(4,7,"END-E");
CursorLabelPos(0,80);
CursorLabelPos(1,85);
CursorLabelPos(3,65);
CursorLabelPos(4,85);
CursorLabelPos(5,65);
CursorLabelPos(7,80);

CursorActive(0,14, ch3%, minstep, "", "", 1);   'Find data points on valid no-apnoeic breath marker channel - end of inspiration
CursorActive(1,5, 1, "Cursor(0)", "Cursor(0)-1", "", amp, 0, 0);   'Trough find - PIF
CursorActive(2,7, 1, "Cursor(1)", "Cursor(1)-1", "", base, 0, 0);   'Rising threshold - isoeletric crossing
CursorActive(3,15, 1, "Cursor(1)", "Cursor(2)", "", 0, repol, 0, "Cursor(2)");   'Repolarisation % - start of inspiration
CursorActive(4,5, 1, "Cursor(0)", "Cursor(0)+10", "", amp, 0, 0);   'Trough find - PIF next breath
CursorActive(5,1, 1, "Cursor(4)", "Cursor(0)", "");   'Maximum value - PEF
CursorActive(6,7, 1, "Cursor(4)", "Cursor(5)", "", base, 0, 0);   'Rising threshold - isoeletric crossing
CursorActive(7,15, 1, "Cursor(4)", "Cursor(6)", "", 0, repol, 0, "Cursor(6)");   'Repolarisation % - end of expiration

CursorVisible(0, 1);  'Show the cursor
CursorVisible(-1,1);

MeasureX(102, 0, "Cursor(0)", "0");
MeasureY(103, 1, "Cursor(0)", "Cursor(3)");
ch5%:=MeasureToChan(0, "TI-vnab", 7, 14, ch3%, minstep, 1, 0, 1); ' to hold TI of valid non-apnoeic breaths (vnab)
Process(0.0, View(-1).MaxTime(), 1, 1, ch5%);
DrawMode(ch5%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch5%, 0,33);   'Set channel background colour to pale yellow

Yield(0,1023);

MeasureX(102, 0, "Cursor(0)", "0");
MeasureY(103, 1, "Cursor(7)", "Cursor(0)");
ch6%:=MeasureToChan(0, "TE-vnab", 7, 14, ch3%, minstep, 1, 0, 1); ' to hold TE
Process(0.0, View(-1).MaxTime(), 1, 1, ch6%);
DrawMode(ch6%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch6%, 0,33);   'Set channel background colour to pale yellow

Yield(0,1023);

ch7%:= MemChan(7,32); 'Add new RealMark channel to hold total breath time (Ttot)
ArrConst(codes%, 0); 'zero all codes
ArrConst(rm, 0.0); 'zero all RealMark values

repeat
    time:=NextTime(ch3%,time); 'get time for next marker
    TI:=ChanValue(ch5%,time); 'measure TI at this time
    TE:=ChanValue(ch6%,time); 'measure TE at this time
    rm[0]:=TI+TE;
    
    if time>-1 and rm[0]>0 then
        MemSetItem(ch7%,0,time,codes%,rm);         'adds an item to the Ttot channel
    endif
    
until time=-1; 'repeats these set of instructions until this condition is met - NextTime() returns -1 when no more items are found

ChanShow(ch7%);
ChanTitle$(ch7%,"Ttot-vnab");
ChanUnits$(ch7%,"s");
Optimise(ch7%);
DrawMode(ch7%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch7%, 0,33);   'Set channel background colour to pale yellow

Yield(0,1023);

MeasureX(102, 0, "Cursor(0)", "0");
MeasureY(100, 1, "Cursor(1)", "0");
ch8% := MeasureToChan(0, "PIF-vnab", 7, 14, ch3%, minstep, 1, 0, 1); ' to hold peak inspiratory flow
Process(0.0, View(-1).MaxTime(), 0, 1, ch8%);
DrawMode(ch8%,3,4, 0,1); 'Set Waveform
ChanColour(ch8%, 0,33);

Yield(0,1023);

MeasureX(102, 0, "Cursor(0)", "0");
MeasureY(100, 1, "Cursor(5)", "0");
ch9% := MeasureToChan(0, "PEF-vnab", 7, 14, ch3%, minstep, 1, 0, 1); 'to hold peak expiratory flow
Process(0.0, View(-1).MaxTime(), 0, 1, ch9%);
DrawMode(ch9%,3,4, 0,1); 'Set Waveform
ChanColour(ch9%, 0,33);

Yield(0,1023);

ch10%:= MemChan(7,32); 'Add new RealMark channel to hold tidal volume (VT)
ArrConst(codes%, 0); 'zero all codes
ArrConst(rm, 0.0); 'zero all RealMark values

repeat
    time:=NextTime(ch3%,time); 'get time for next marker
    rm[0]:=ChanValue(ch1%,time); 'measure VT at this time
        
    if time>-1 then
        MemSetItem(ch10%,0,time,codes%,rm);         'adds an item to the Ttot channel
    endif
    
until time=-1; 'repeats these set of instructions until this condition is met - NextTime() returns -1 when no more items are found

ChanShow(ch10%);
ChanTitle$(ch10%,"VT-vnab");
ChanUnits$(ch10%,"mL");
Optimise(ch10%);
DrawMode(ch10%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch10%, 0,33);   'Set channel background colour to pale yellow

Yield(0,1023);

ch11%:= MemChan(7,32); 'Add new RealMark channel to hold expired volume (EV)
ArrConst(codes%, 0); 'zero all codes
ArrConst(rm, 0.0); 'zero all RealMark values

repeat
    time:=NextTime(ch3%,time); 'get time for next marker
    rm[0]:=ChanValue(ch2%,time); 'measure VT at this time
        
    if time>-1 then
        MemSetItem(ch11%,0,time,codes%,rm);         'adds an item to the Ttot channel
    endif
    
until time=-1; 'repeats these set of instructions until this condition is met - NextTime() returns -1 when no more items are found

ChanShow(ch11%);
ChanTitle$(ch11%,"EV-vnab");
ChanUnits$(ch11%,"mL");
Optimise(ch11%);
DrawMode(ch11%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch11%, 0,33);   'Set channel background colour to pale yellow

Yield(0,1023);

ch12%:= MemChan(7,32); 'Add new RealMark channel 
ArrConst(codes%, 0); 'zero all codes
ArrConst(rm, 0.0); 'zero all RealMark values

repeat
    time:=NextTime(ch3%,time); 'get time for next marker
    Ttot:=ChanValue(ch7%,time); 'measure Ttot at this time
    
    if Ttot>0 then
        rm[0]:=60/Ttot;
    endif
        
    if time>-1 and rm[0]>0 then
        MemSetItem(ch12%,0,time,codes%,rm);         'adds an item to the Ttot channel
    endif
    
until time=-1; 'repeats these set of instructions until this condition is met - NextTime() returns -1 when no more items are found

ChanShow(ch12%);
ChanTitle$(ch12%,"f-vnab");
ChanUnits$(ch12%,"bpm");
Optimise(ch12%);
DrawMode(ch12%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch12%, 0,33);   'Set channel background colour to pale yellow

Yield(0,1023);

ch13%:= MemChan(7,32); 'Add new RealMark channel to hold minute volumes
ArrConst(codes%, 0); 'zero all codes
ArrConst(rm, 0.0); 'zero all RealMark values

repeat
    time:=NextTime(ch3%,time); 'get time for next marker
    VT:=ChanValue(ch10%,time); 'measure VT at this time
    f:=ChanValue(ch12%,time); 'measure f at this time
    rm[0]:=VT*f;
    
    if time>-1 and rm[0]>0 then
        MemSetItem(ch13%,0,time,codes%,rm);         'adds an item to the MV channel
    endif
    
until time=-1; 'repeats these set of instructions until this condition is met - NextTime() returns -1 when no more items are found

ChanShow(ch13%);
ChanTitle$(ch13%,"MV-vnab");
ChanUnits$(ch13%,"mL/min");
Optimise(ch13%);
DrawMode(ch13%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch13%, 0,33);   'Set channel background colour to pale yellow

WindowVisible(1);

Variability%();

fileok%:=1;
Return 1;
End;

var ch14%, ch15%, ch16%, ch17%;

Func Variability%();

View(res%);

WindowVisible(0);

'first create new marker channel to mark all valid plus apnoeic breaths(3xTE)

ch14% := MemChan(5); 'Add new Marker channel to import all VNABS plus apnoeas(3xTE)
ChanShow(ch14%); 'Make it visible
MemImport(ch14%, ch3%, 0.0, MaxTime()); ' import all marks from VNAB channel
MemImport(ch14%, chApnoeas%, 0.0, MaxTime()); 'import all marks from apnoeas(3xTE) channel
ChanTitle$(ch14%,"Valid+apnoeic breath");
DrawMode(ch14%,2,1, 0,0); 'Set to lines draw mode
ChanColour(ch14%, 0,34);   'Set channel background colour to pale green

'now create channel holding Ttot for all valid + apnoeic breaths

CursorDelete(-1);
CursorNew(); 'cursors for breath detection
CursorNew();
CursorNew();
CursorNew();
CursorNew();
CursorNew();
CursorNew();
CursorLabel(4,0,"END-I");
CursorLabel(4,1,"PIF");
CursorLabel(0,2);           ' isoeletric crossing
CursorLabel(4,3,"START-I");
CursorLabel(4,4,"PIF");
CursorLabel(4,5,"PEF");
CursorLabel(0,6);           'isoeletric crossing
CursorLabel(4,7,"END-E");
CursorLabelPos(0,80);
CursorLabelPos(1,85);
CursorLabelPos(3,65);
CursorLabelPos(4,85);
CursorLabelPos(5,65);
CursorLabelPos(7,80);

CursorActive(0,14, ch14%, minstep, "", "", 1);   'Find data points on valid + apnoeic breath marker channel - end of inspiration
CursorActive(1,5, 1, "Cursor(0)", "Cursor(0)-1", "", amp, 0, 0);   'Trough find - PIF
CursorActive(2,7, 1, "Cursor(1)", "Cursor(1)-1", "", base, 0, 0);   'Rising threshold - isoeletric crossing
CursorActive(3,15, 1, "Cursor(1)", "Cursor(2)", "", 0, repol, 0, "Cursor(2)");   'Repolarisation % - start of inspiration
CursorActive(4,5, 1, "Cursor(0)", "Cursor(0)+10", "", amp, 0, 0);   'Trough find - PIF next breath
CursorActive(5,1, 1, "Cursor(4)", "Cursor(0)", "");   'Maximum value - PEF
CursorActive(6,7, 1, "Cursor(4)", "Cursor(5)", "", base, 0, 0);   'Rising threshold - isoeletric crossing
CursorActive(7,15, 1, "Cursor(4)", "Cursor(6)", "", 0, repol, 0, "Cursor(6)");   'Repolarisation % - end of expiration

CursorVisible(0, 1);  'Show the cursor
CursorVisible(-1,1);

MeasureX(102, 0, "Cursor(0)", "0");
MeasureY(103, 1, "Cursor(7)", "Cursor(3)");
ch15%:=MeasureToChan(0, "Ttot(v+apb)", 7, 14, ch14%, minstep, 1, 0, 1); ' to hold Ttot of valid+apnoeic breaths(3xTE)
Process(0.0, View(-1).MaxTime(), 1, 1, ch15%);
DrawMode(ch15%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch15%, 0,34);   'Set channel background colour to pale yellow

Yield(0,1023);

'now set residuals for real varibility analysis from valid non-apnoeic breaths

CursorDelete(-1);
CursorNew(); 'cursors for breath detection
CursorNew();
CursorLabel(4,0,"X(i)");
CursorLabel(4,1,"X(i+1)");

CursorActive(0,14, ch7%, minstep, "", "", 1);   'Find data points on Ttot-vnab channel at X(i)
CursorActive(1,14, ch7%, "Cursor(0)+0.001", "MaxTime()", "", 1);   'Data points on Ttot-vnab channel at X(i+1)

MeasureX(102, 0, "Cursor(0)", "0");
MeasureY(101, ch7%, "Cursor(1)", "Cursor(0)");
ch16% := MeasureToChan(0, "Ttot(i+1)-Ttot(i)(vnab)", 7, 14, ch7%, minstep, 1, 0, 1); ' to hold residuals X(i+1)-X(i)
Process(0.0, View(-1).MaxTime(), 0, 1, ch16%);
DrawMode(ch16%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch16%, 0,33);   'Set channel background colour to pale yellow

Yield(0,1023);

'now set residuals for real varibility analysis from valid+apnoeic breaths

CursorActive(0,14, ch15%, minstep, "", "", 1);   'Find data points on Ttot-v+apb channel at X(i)
CursorActive(1,14, ch15%, "Cursor(0)+0.001", "MaxTime()", "", 1);   'Data points on Ttot-v+apb channel at X(i+1)

MeasureX(102, 0, "Cursor(0)", "0");
MeasureY(101, ch15%, "Cursor(1)", "Cursor(0)");
ch17% := MeasureToChan(0, "Ttot(i+1)-Ttot(i)(v+apb)", 7, 14, ch15%, minstep, 1, 0, 1); ' to hold residuals X(i+1)-X(i)
Process(0.0, View(-1).MaxTime(), 0, 1, ch17%);
DrawMode(ch17%,3,4, 0,1); 'Set Realmark waveform to dots size 4
ChanColour(ch17%, 0,34);   'Set channel background colour to pale green

WindowVisible(1);

fileok%:=1;
Return 1;
End;

Func ROI1%();

View (res%);

XRange(0, MaxTime());
FrontView(res%);

CursorDelete(-1);
CursorNew();
CursorActive(0,0);   'Static
CursorActive(1,16, 0, "Cursor(0)+3600");   'Expression
CursorVisible(0,1);  'Show the cursor
CursorVisible(1,1);
CursorLabel(4,0,"START");
CursorLabel(4,1,"END");
Cursor(0,1200);

fileok%:=1;
Return 1;
End

Func ROI2%();

View (res%);

FrontView(res%);

CursorDelete(-1);
CursorNew();
CursorActive(0,0);   'Static
CursorActive(1,16, 0, "Cursor(0)+3600");   'Expression
CursorVisible(0,1);  'Show the cursor
CursorVisible(1,1);
CursorLabel(4,0,"START");
CursorLabel(4,1,"END");
Cursor(0,6600);

fileok%:=1;
Return 1;
End

Func Print%();

'first declare variables that will hold the results
var StartTime, EndTime;
var nbreaths, nvalid, nratio;
var ch5, ch6, ch7, ch8, ch8t, ch9, ch10, ch11, ch12, ch13;
var ch16ARV, ch16SV, ch17ARV, ch17SV;

View(res%); 'Point to the result view

StartTime:=Cursor(0);
Endtime:=Cursor(1);
nvalid:=Count(ch3%,Cursor (0), Cursor(1));
nbreaths:=Count(chTE%,Cursor (0), Cursor (1));
nratio:=nvalid/nbreaths*100;

ch5:=ChanMeasure(ch5%,2,Cursor(0),Cursor(1)); 'get mean between cursor 0 and 1
ch6:=ChanMeasure(ch6%,2,Cursor(0),Cursor(1)); 'get mean between cursor 0 and 1
ch7:=ChanMeasure(ch7%,2,Cursor(0),Cursor(1)); 'get mean between cursor 0 and 1
ch8t:=ChanMeasure(ch8%,2,Cursor(0),Cursor(1)); 'get mean between cursor 0 and 1
ch8:=Abs(ch8t);
ch9:=ChanMeasure(ch9%,2,Cursor(0),Cursor(1)); 'get mean between cursor 0 and 1
ch10:=ChanMeasure(ch10%,2,Cursor(0),Cursor(1)); 'get mean between cursor 0 and 1
ch11:=ChanMeasure(ch11%,2,Cursor(0),Cursor(1)); 'get mean between cursor 0 and 1
ch12:=ChanMeasure(ch12%,2,Cursor(0),Cursor(1)); 'get mean between cursor 0 and 1
ch13:=ChanMeasure(ch13%,2,Cursor(0),Cursor(1)); 'get mean between cursor 0 and 1

ch16ARV:=ChanMeasure(ch16%,19,Cursor(0),Cursor(1)); 'get means of absolute values between cursor 0 and 1
ch16SV:=ChanMeasure(ch16%,11,Cursor(0),Cursor(1));  'get Root Mean Square values between cursor 0 and 1 - square root of the sum of the squares divided by the number of values
ch17ARV:=ChanMeasure(ch17%,19,Cursor(0),Cursor(1)); 'get means of absolute values between cursor 0 and 1
ch17SV:=ChanMeasure(ch17%,11,Cursor(0),Cursor(1));  'get Root Mean Square values between cursor 0 and 1 - square root of the sum of the squares divided by the number of values

if txt%=0 then
    Message("You must open a text file using the script button");
    return 1;
Endif

if txt%>0 then
    View(txt%);
    Print("\nStart (s) = ",StartTime);
    Print("End (s) = ",EndTime);
    Print("Potential breaths detected = %d",nbreaths);
    Print("\nMax allowed deviation Insp/Exp volumes = %.2f%",cutoff);
    Print("\nNon-apnoeic breaths validated = %d",nvalid);
    Print("\nGlobal non-apnoeic breath validation rate = %.2f%",nratio);
    Print("\n\nTI\tTE\tTtot\tPIF\tPEF\tVT\tEV\tf\tMV\tARV-vb\tSV-vb\tARV-vba\tSV-vba");
    Print("\ns\ts\ts\tmL/s\tmL/s\tmL\tmL\tbpm\tmL/min\tAU\tAU\tAU\tAU");
    Print("\n%.3f\t%.3f\t%.3f\t%.2f\t%.2f\t%.3f\t%.3f\t%.0f\t%.1f\t%.3f\t%.3f\t%.3f\t%.3f\t",ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch16ARV,ch16SV,ch17ARV,ch17SV); 
endif

fileok%:=1;
Return 1;
End